function [] = GUI(varargin)
%GUI for model configurator
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Up&Down
% Author - Michal Semelka, <m.semelka@gmail.com>, 2017
% https://github.com/michalsemelka/UpEtDown
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% resolution calculation
resolution = get(0,'screensize');

correction = 0;
correction30 = 0;
correction40 = 0;
if (resolution(4) < 800)
    correction = 50;
    correction30 = 30;
    correction40 = 40;
end

positionx = (resolution(3) - 1000)/2;
positiony = (resolution(4) - 700-correction)/2;

% Objects definitions
G.window = figure('units','pixels',...
              'position',[positionx+300 positiony+correction30 650 700-correction],...
              'menubar','none',...
              'name','Up&Down - Model configurator',...
              'numbertitle','off',...
              'resize','off',...
              'Color', get(0,'DefaultUicontrolBackgroundColor'),...
              'DockControls','off');
if (~isdeployed)          
    check_img = imread('assets/g_check.jpg');
else
    check_img = imread('g_check.jpg');
end

% Panel base of simulation
G.step1_panel = uipanel('Parent',G.window',...
            'units','pixels',...
            'Position',[20 600-correction40 610 80],...
            'Title', 'Step 1 - Base parameters',...
            'BorderType', 'etchedin');
        
G.step1_t_lifts = uicontrol('Parent',G.step1_panel',...
            'style','text',...
            'units','pixels',...
            'position',[25 20 120 14],...
            'String', 'Number of lifts',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'left',...
            'FontWeight','Normal');
G.step1_e_lifts = uicontrol('Parent',G.step1_panel',...
            'style','edit',...
            'units','pixels',...
            'position',[165 13 60 28],...
            'String', 1,...
            'BackgroundColor', [1 1 1],...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');
        
G.step1_t_floors = uicontrol('Parent',G.step1_panel',...
            'style','text',...
            'units','pixels',...
            'position',[285 20 120 14],...
            'String', 'Number of floors',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'left',...
            'FontWeight','Normal');
G.step1_e_floors = uicontrol('Parent',G.step1_panel',...
            'style','edit',...
            'units','pixels',...
            'position',[425 13 60 28],...
            'String', 2,...
            'BackgroundColor', [1 1 1],...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');

G.step1_a_check = axes('Parent',G.step1_panel',...
            'units','pixels',...
            'Position',[570 15 25 25], ...
            'xtick',[],...
            'ytick',[],...
            'Visible', 'Off');
G.step1_i_check = imshow(check_img, 'Parent', G.step1_a_check);
set(G.step1_i_check, 'Visible', 'Off');

G.step1_btn = uicontrol('Parent',G.step1_panel',...
            'style','pushbutton',...
            'units','pixels',...
            'position',[505 13 60 28],...
            'String', 'Set',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');
        
% Panel settings of lifts
G.lifts_panel = uipanel('Parent',G.window',...
            'units','pixels',...
            'Position',[20 390-correction30 610 190],...
            'Title', 'Step 2 - Lifts parameters',...
            'BorderType', 'etchedin');
G.lifts_popup = uicontrol('Parent',G.lifts_panel',...
            'style','popupmenu',...
            'units','pixels',...
            'BackgroundColor', [1 1 1],...
            'position',[20 150 213 14],...
            'String', 'Select lift to configure',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'left',...
            'FontWeight','Normal');        
G.lifts_t_base = uicontrol('Parent',G.lifts_panel',...
            'style','text',...
            'units','pixels',...
            'position',[25 110 120 14],...
            'String', 'Base floor',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'left',...
            'FontWeight','Normal');
G.lifts_e_base = uicontrol('Parent',G.lifts_panel',...
            'style','edit',...
            'units','pixels',...
            'position',[165 103 60 28],...
            'String', 1,...
            'BackgroundColor', [1 1 1],...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');
G.lifts_t_final = uicontrol('Parent',G.lifts_panel',...
            'style','text',...
            'units','pixels',...
            'position',[25 70 120 14],...
            'String', 'Final floor',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'left',...
            'FontWeight','Normal');
G.lifts_e_final = uicontrol('Parent',G.lifts_panel',...
            'style','edit',...
            'units','pixels',...
            'position',[165 63 60 28],...
            'String', 2,...
            'BackgroundColor', [1 1 1],...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');
G.lifts_t_forb = uicontrol('Parent',G.lifts_panel',...
            'style','text',...
            'units','pixels',...
            'position',[25 30 130 14],...
            'String', 'List of forbidden floors',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'left',...
            'FontWeight','Normal');
G.lifts_e_forb = uicontrol('Parent',G.lifts_panel',...
            'style','edit',...
            'units','pixels',...
            'position',[165 23 60 28],...
            'String', 'none',...
            'BackgroundColor', [1 1 1],...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');

G.lifts_t_capacity = uicontrol('Parent',G.lifts_panel',...
            'style','text',...
            'units','pixels',...
            'position',[285 110 120 14],...
            'String', 'Capacity',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'left',...
            'FontWeight','Normal');
G.lifts_e_capacity = uicontrol('Parent',G.lifts_panel',...
            'style','edit',...
            'units','pixels',...
            'position',[425 103 60 28],...
            'String', 1,...
            'BackgroundColor', [1 1 1],...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');
G.lifts_t_speed = uicontrol('Parent',G.lifts_panel',...
            'style','text',...
            'units','pixels',...
            'position',[285 70 120 14],...
            'String', 'Speed',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'left',...
            'FontWeight','Normal');
G.lifts_e_speed = uicontrol('Parent',G.lifts_panel',...
            'style','edit',...
            'units','pixels',...
            'position',[425 63 60 28],...
            'String', 0.7,...
            'BackgroundColor', [1 1 1],...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');
        
G.lifts_a_check = axes('Parent',G.lifts_panel',...
            'units','pixels',...
            'Position',[425 23 25 25], ...
            'xtick',[],...
            'ytick',[],...
            'Visible', 'Off');
G.lifts_i_check = imshow(check_img, 'Parent', G.lifts_a_check);
set(G.lifts_i_check, 'Visible', 'Off');

G.lifts_btn = uicontrol('Parent',G.lifts_panel',...
            'style','pushbutton',...
            'units','pixels',...
            'position',[285 23 100 28],...
            'String', 'Set this lift',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');
G.lifts_btnSet = uicontrol('Parent',G.window',...
            'style','pushbutton',...
            'units','pixels',...
            'position',[20 355-correction30 300 28],...
            'String', 'Confirm lifts configuration',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');
        
G.lifts_btnShow = uicontrol('Parent',G.window',...
            'style','pushbutton',...
            'units','pixels',...
            'position',[330 355-correction30 300 28],...
            'String', 'Show plan of building',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');

G.lifts_btnSave = uicontrol('Parent',G.window',...
            'style','pushbutton',...
            'units','pixels',...
            'position',[330 320-correction30 300 28],...
            'String', 'Save current configuration',...
            'Enable', 'Off',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');

G.lifts_t_liftPerFloor = uicontrol('Parent',G.window',...
            'style','text',...
            'units','pixels',...
            'position',[20 325-correction30 250 14],...
            'String', 'Average number of lifts per floor',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'left',...
            'FontWeight','Normal');
G.lifts_e_liftPerFloor = uicontrol('Parent',G.window',...
            'style','text',...
            'units','pixels',...
            'position',[255 310-correction30 60 28],...
            'String', '-',...
            'Enable', 'On',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');
        
% Human panel
G.humans_panel = uipanel('Parent',G.window',...
            'units','pixels',...
            'Position',[20 90 610 190],...
            'Title', 'Step 3 - System and visitors configuration',...
            'BorderType', 'etchedin');

G.humans_t_behavior = uicontrol('Parent',G.humans_panel',...
            'style','text',...
            'units','pixels',...
            'position',[25 150 120 14],...
            'String', 'Behavior',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'left',...
            'FontWeight','Normal');
G.humans_popup = uicontrol('Parent',G.humans_panel',...
            'style','popupmenu',...
            'units','pixels',...
            'BackgroundColor', [1 1 1],...
            'position',[25 120 200 14],...
            'String', {'Random', 'Scheduler'},...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'left',...
            'FontWeight','Normal');
G.humans_lift = uicontrol('Parent',G.humans_panel',...
            'style','checkbox',...
            'units','pixels',...
            'position',[25 80 200 14],...
            'String', 'Lift to base when idle',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'left',...
            'FontWeight','Normal');

G.humans_btnSetIter = uicontrol('Parent',G.humans_panel',...
            'style','pushbutton',...
            'units','pixels',...
            'position',[25 25 140 28],...
            'String', 'Set',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');
G.humans_a_check = axes('Parent',G.humans_panel',...
            'units','pixels',...
            'Position',[200 26 25 25], ...
            'xtick',[],...
            'ytick',[],...
            'Visible', 'Off');
G.humans_i_check = imshow(check_img, 'Parent', G.humans_a_check);
set(G.humans_i_check, 'Visible', 'Off');
      

G.humans_panelLoad = uipanel('Parent',G.humans_panel',...
            'units','pixels',...
            'Position',[263 10 320 160],...
            'Title', '',...
            'BorderType', 'etchedin',...
            'Visible', 'On');
G.humans_panelLoad_t_head = uicontrol('Parent',G.humans_panelLoad',...
            'style','text',...
            'units','pixels',...
            'position',[15 130 200 14],...
            'String', 'List of visitors',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'left',...
            'FontWeight','Normal');
G.humans_panelLoad_t = uicontrol('Parent',G.humans_panelLoad',...
            'style','text',...
            'units','pixels',...
            'position',[15 55 200 14],...
            'String', 'Path to file',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'left',...
            'FontWeight','Normal');
G.humans_panelLoad_e = uicontrol('Parent',G.humans_panelLoad',...
            'style','edit',...
            'units','pixels',...
            'position',[105 48 195 28],...
            'String', '...',...
            'BackgroundColor', [1 1 1],...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');
G.humans_panelNew_btn = uicontrol('Parent',G.humans_panelLoad',...
            'style','pushbutton',...
            'units','pixels',...
            'position',[15 85 287 35],...
            'String', 'Open generator',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');
        
G.humans_panelLoad_btnLoad = uicontrol('Parent',G.humans_panelLoad',...
            'style','pushbutton',...
            'units','pixels',...
            'position',[15 10 110 28],...
            'String', 'Browse...',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');
G.humans_panelLoad_btnSet = uicontrol('Parent',G.humans_panelLoad',...
            'style','pushbutton',...
            'units','pixels',...
            'position',[135 10 110 28],...
            'String', 'Set',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');
G.humans_a_checkLoad = axes('Parent',G.humans_panelLoad',...
            'units','pixels',...
            'Position',[278 16 20 20], ...
            'xtick',[],...
            'ytick',[],...
            'Visible', 'Off');
G.humans_i_checkLoad = imshow(check_img, 'Parent', G.humans_a_checkLoad);
set(G.humans_i_checkLoad, 'Visible', 'Off');

% Reset all
G.btn_reset = uicontrol('Parent',G.window',...
            'style','pushbutton',...
            'units','pixels',...
            'position',[20 25 150 50],...
            'String', 'Reset all',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');

% Start of simulation
G.btn_start = uicontrol('Parent',G.window',...
            'style','pushbutton',...
            'units','pixels',...
            'position',[190 25 440 50],...
            'String', 'Start simulation',...
            'FontUnits', 'Pixel',...
            'FontSize', 12,...
            'HorizontalAlignment', 'center',...
            'FontWeight','Normal');
% Menu items
G.file = uimenu(G.window,'Label','File');
G.menu = uimenu(G.file,'Label','Load configuration','Accelerator','A');
G.menu_lift_save = uimenu(G.file,'Label','Save configuration','Accelerator','D', 'Enable', 'Off');
G.menu_lift_confirm = uimenu(G.file,'Label','Confirm lifts configuration','Accelerator','S', 'Enable', 'Off');
G.menu_showGUI = uimenu(G.file,'Label','Show plan of building','Accelerator','F', 'Enable', 'Off','Separator', 'on', 'Enable', 'Off');
G.menu_human_gen = uimenu(G.file,'Label','Open visitors generator','Accelerator','T', 'Separator', 'on', 'Enable', 'Off');
G.menu_human_load = uimenu(G.file,'Label','Load list of visitors','Accelerator','R', 'Enable', 'Off');
G.menu_human_set = uimenu(G.file,'Label','Set list of visitors','Accelerator','E', 'Enable', 'Off');
G.menu_start = uimenu(G.file,'Label','START Simulation','Accelerator','X', 'Enable', 'Off', 'Separator', 'on');
G.reset = uimenu(G.file,'Label','Reset ALL','Accelerator','Y','Separator', 'on');
G.exit = uimenu(G.file,'Label','Exit','Accelerator','L', 'Separator', 'on');
G.about = uimenu(G.window,'Label','About');

% Register callbacks functions
set(G.step1_btn, 'Callback', {@checkBasePanel,G});
set(G.lifts_btn, 'Callback', {@setOneLift,G});
set(G.lifts_popup,'Callback', {@handlePopUp,G});
set(G.lifts_btnSet,'Callback', {@setAllLifts,G});
set(G.lifts_btnShow,'Callback', {@showPlan,G});
set(G.lifts_btnSave,'Callback', {@saveLiftsSettings,G});
set(G.menu,'Callback', {@loadLiftsSettings,G});
set(G.btn_start,'Callback', {@startSimulation,G});
set(G.btn_reset,'Callback', {@resetAll,G});
set(G.humans_btnSetIter,'Callback', {@setHumansBehavior,G});
set(G.humans_popup,'Callback', {@HumanSettingsChanged,G});
set(G.humans_lift,'Callback', {@HumanSettingsChanged,G});  
set(G.humans_panelNew_btn,'Callback', {@generateHumansFcn,G});   
set(G.humans_panelLoad_btnLoad,'Callback', {@loadHumans,G}); 
set(G.humans_panelLoad_btnSet,'Callback', {@setLoadedHumans,G}); 
set(G.menu_lift_save,'Callback', {@saveLiftsSettings,G});
set(G.menu_lift_confirm,'Callback', {@setAllLifts,G});
set(G.menu_showGUI,'Callback', {@showPlan,G});
set(G.menu_human_gen,'Callback', {@generateHumansFcn,G});
set(G.menu_human_load,'Callback', {@loadHumans,G});
set(G.menu_human_set,'Callback', {@setLoadedHumans,G});
set(G.menu_start,'Callback', {@startSimulation,G});
set(G.about,'Callback', {@showAbout,G});
set(G.reset,'Callback', {@resetAll,G}); 
set(G.exit,'Callback', {@closeWindow,G});

% Array of handles to disable 
l_p_a = [G.lifts_e_base G.lifts_e_final G.lifts_e_forb G.lifts_e_capacity G.lifts_e_speed G.lifts_popup G.lifts_btn G.lifts_btnSet G.lifts_btnShow]; 
h_p_a = [G.humans_t_behavior G.humans_popup G.humans_lift G.lifts_e_forb G.humans_btnSetIter];
set(h_p_a, 'Enable', 'off');
set(l_p_a, 'Enable', 'off');
set(findall(G.humans_panelLoad, '-property', 'Enable'), 'Enable', 'off');
set(G.btn_start, 'Enable', 'off');

% Properties
setappdata(G.window,'lifts',[]);
setappdata(G.window,'fileString',[]);
setappdata(G.window,'liftTry',false);

% Callback functions
function [] = checkBasePanel(varargin)
% Fcn checks step1 panel    
    if (nargin == 1)
        G = varargin{1};
    else
        G = varargin{3};
    end
    
    numOfLifts = str2num(get(G.step1_e_lifts, 'String'));
    numOfFloors = str2num(get(G.step1_e_floors, 'String'));
    
    try
        error = false;
        validateattributes(numOfLifts, {'numeric'},{'integer', 'real', 'finite', 'positive','scalar','>',0})
        validateattributes(numOfFloors, {'numeric'},{'integer', 'real', 'finite', 'positive','scalar','>',1})
    catch ME
        msgbox(ME.message);
        set(G.step1_i_check, 'Visible', 'Off')
        error = true;
    end

    str_lifts{1} = 'Select lift to configure';

    if (error ~= true)
        set(G.step1_a_check, 'Visible', 'Off')
        set(G.step1_i_check, 'Visible', 'On');
        
        testSet = getappdata(G.window,'numOfFloors');
        
        if (nargin ~= 1 && isempty(testSet))
            setappdata(G.window,'lifts',cell(numOfLifts,6));  
        else
            lifts = getappdata(G.window,'lifts');
            liftSize = size(lifts,1);
            if (numOfLifts >= liftSize)
                lifts(end+1:end+(numOfLifts-liftSize),:) = {[]};
            else
                lifts = lifts(1:numOfLifts,:);
            end
            setappdata(G.window,'lifts',lifts);
        end
        
        str = 'Lift';
        for i=2:numOfLifts+1
            str_num = num2str(i-1);
            str_lifts{i} = sprintf('%s %s',str,str_num);
        end
            
        setappdata(G.window,'numOfLifts',numOfLifts);
        setappdata(G.window,'numOfFloors',numOfFloors);

        
        % every time button pressed change popup value to 1
        set(G.lifts_popup, 'String', str_lifts, 'Enable', 'On', 'Value', 1);
        l_p_a = [G.lifts_e_base G.lifts_e_final G.lifts_e_forb G.lifts_e_capacity G.lifts_e_speed G.lifts_btn G.lifts_btnShow];
        set(l_p_a, 'Enable', 'Off');
        
        set(G.lifts_i_check, 'Visible', 'Off');
        set(G.step1_e_floors, 'Enable', 'Off');
        %set(findall(G.step1_panel, '-property', 'Enable'), 'Enable', 'Off');
        
        set(G.menu_human_gen,'Enable', 'On');

    else
        set(G.lifts_popup, 'String', str_lifts{1}, 'Value', 1);
        l_p_a = [G.lifts_popup G.lifts_btnSet G.lifts_e_base G.lifts_e_final G.lifts_e_forb G.lifts_e_capacity G.lifts_e_speed G.lifts_btn G.lifts_btnShow];
        set(l_p_a, 'Enable', 'Off');
        set(G.lifts_i_check, 'Visible', 'Off');
    end

function [] = handlePopUp(varargin)
    
    if (nargin == 1)
        G = varargin{1};
        this = G.lifts_popup;
    else
        this = varargin{1};
        G = varargin{3};
    end

    value = get(this, 'Value');

    lifts = getappdata(G.window, 'lifts');

    l_p_a = [G.lifts_e_base G.lifts_e_final G.lifts_e_forb G.lifts_e_capacity G.lifts_e_speed G.lifts_btn G.lifts_btnSet];
    
    if (value ~= 1)
        set(l_p_a, 'Enable', 'On');
        set(G.menu_lift_confirm,'Enable', 'On');
        
        liftID = value - 1;
        isSet = ~isempty(lifts{liftID,6});
    
        if (isSet)
            set(G.lifts_e_base, 'String', lifts{liftID,1});
            set(G.lifts_e_final, 'String', lifts{liftID,2});
            set(G.lifts_e_forb, 'String', num2str(lifts{liftID,3}));
            set(G.lifts_e_capacity, 'String', lifts{liftID,4});
            set(G.lifts_e_speed, 'String', lifts{liftID,5});

            set(G.lifts_a_check, 'Visible', 'Off')
            set(G.lifts_i_check, 'Visible', 'On');
        else
            set(G.lifts_e_base, 'String', 1);
            set(G.lifts_e_final, 'String', getappdata(G.window,'numOfFloors'));
            set(G.lifts_e_forb, 'String', 'none');
            set(G.lifts_e_capacity, 'String', 1);
            set(G.lifts_e_speed, 'String', 0.7);

            set(G.lifts_i_check, 'Visible', 'Off');
        end
    else
        set(l_p_a, 'Enable', 'Off');
        set(G.lifts_i_check, 'Visible', 'Off');
    end

function [] = setOneLift(varargin)
    
    G = varargin{3};

    value = get(G.lifts_popup, 'Value');
    lifts = getappdata(G.window, 'lifts');
    liftID = value - 1;
    
    numOfFloors = getappdata(G.window, 'numOfFloors');

    tmpBase = str2num(get(G.lifts_e_base, 'String'));
    tmpFinal = str2num(get(G.lifts_e_final, 'String'));
    
    tmpForb = get(G.lifts_e_forb, 'String');
    if (strcmp(tmpForb, 'none'))
        tmpForb = 0;
    else
        tmpForb = str2num(tmpForb);
    end
    
    tmpCapacity = str2num(get(G.lifts_e_capacity, 'String'));
    tmpSpeed = str2num(get(G.lifts_e_speed, 'String'));
    
    msgID = 'MYFUN:BadIndex';
    msg = 'Floors can be only unique!';
    baseException = MException(msgID,msg);

    try
        error = false;
        validateattributes(tmpBase, {'numeric'},{'scalar','integer', 'real', 'finite', 'positive','>',0, '<', numOfFloors});
        validateattributes(tmpFinal, {'numeric'},{'scalar','integer', 'real', 'finite', 'positive','>',tmpBase, '<', numOfFloors+1});
        
        if (size(tmpForb,2) ~= size(unique(tmpForb),2))
            throw(baseException);
        end
        
        if (isempty(tmpForb) || ~(isscalar(tmpForb) && tmpForb == 0))
            validateattributes(tmpForb, {'numeric'},{'vector','integer', 'real', 'finite', 'positive','>',tmpBase, '<', tmpFinal});
        end
        
        validateattributes(tmpCapacity, {'numeric'},{'scalar','integer', 'real', 'finite', 'positive','>',0});
        validateattributes(tmpSpeed, {'double'},{'scalar', 'real', 'finite', 'positive','>',0,'<=',0.7});
    catch ME
        msgbox(ME.message);
        set(G.lifts_i_check, 'Visible', 'Off')
        error = true;
        
        lifts(liftID,6) = {[]};
        setappdata(G.window,'lifts',lifts);
    end
    
    if (error ~= true)
        set(G.lifts_a_check, 'Visible', 'Off')
        set(G.lifts_i_check, 'Visible', 'On');
        
        lifts(liftID,1) = {tmpBase};
        lifts(liftID,2) = {tmpFinal};
        lifts(liftID,3) = {tmpForb};
        lifts(liftID,4) = {tmpCapacity};
        lifts(liftID,5) = {tmpSpeed};
        lifts(liftID,6) = {true};
        
        setappdata(G.window,'lifts',lifts);
        setappdata(G.window,'liftTry', false);
    end
    
function [] = showPlan(varargin)
    
    G = varargin{3};
    
    main = getappdata(G.window, 'sG');
    main.showGUIWindow();
    
function [] = setAllLifts(varargin)
    
    G = varargin{3};
    
    lifts = getappdata(G.window, 'lifts');
    areLiftsSet = [];
    areLiftsSet = [areLiftsSet lifts{:,6}];
    
    if (size(areLiftsSet,2) == size(lifts,1))
        
        createSObjectForView(G);
        sG = getappdata(G.window, 'sG');
        error = sG.checkAllFloorsCovered();
        liftTry = getappdata(G.window,'liftTry');
        
        set(G.menu_showGUI, 'Enable', 'On');
        set(G.menu_lift_save, 'Enable', 'On');
        
        if (error && ~liftTry)
            msgbox('There are some floors with no lifts, if you wish so, confirm the configuration one more time!');
            setappdata(G.window,'liftTry', true);
        else          
            set(G.lifts_btnShow, 'Enable', 'On');
            l_p_a = [G.lifts_e_base G.lifts_e_final G.lifts_e_forb G.lifts_e_capacity G.lifts_e_speed G.lifts_popup G.lifts_btn G.lifts_btnSet];
            set(l_p_a, 'Enable', 'off');
            h_p_a = [G.humans_t_behavior G.humans_popup G.humans_lift G.humans_btnSetIter];
            set(h_p_a, 'Enable', 'On');
            set(G.lifts_btnSave, 'Enable', 'On');
            set(G.menu_lift_confirm, 'Enable', 'Off');
            set(G.step1_e_lifts, 'String', getappdata(G.window,'numOfLifts'));
            set(findall(G.step1_panel, '-property', 'Enable'), 'Enable', 'Off');
        end
        
    else
        msgbox('Please set up all lifts!');
        l_p_a = [G.lifts_e_base G.lifts_e_final G.lifts_e_forb G.lifts_e_capacity G.lifts_e_speed G.lifts_popup G.lifts_btn];
        set(l_p_a, 'Enable', 'on');
    end
    
function [] = saveLiftsSettings(varargin)
    
    G = varargin{3};
    
    lifts = getappdata(G.window, 'lifts');
    numOfLifts = getappdata(G.window, 'numOfLifts');
    numOfFloors = getappdata(G.window, 'numOfFloors');
        
    testFunction = exist('datetime', 'file');
    
    if (testFunction == 0)
        fileDate = datestr(now, 'HH-MM-yyyy-dd-mm');
    else
        fileDate=char(datetime('now','Format','HH-mm''-''yyyy-dd-MM'));
    end
    
    fileNamePrefix='Lifts-';
    fileNumOfLifts = num2str(numOfLifts);
    fileNumOfFloors = num2str(numOfFloors);
    
    fileName = strcat(fileNamePrefix,fileNumOfFloors,'-',fileNumOfLifts,'_');
    
    if (~isdeployed)
        filePath='app/assets/';
    else
        filePath='assets/';
    end
    
    error = false;
    try
        if (isdeployed && ismac)
            [fileMac,pathMac] = uiputfile(strcat(fileName,fileDate, '.mat'),'Save configuration');
            save(strcat(pathMac,fileMac), 'numOfFloors', 'numOfLifts', 'lifts');
        else
            save(strcat(filePath,fileName,fileDate), 'numOfFloors', 'numOfLifts', 'lifts');
        end
    catch ME
        fprintf('Error! %s \n', ME.message);
        error = true;
    end
    
    if (error == false)
        msgbox('Configuration was successfully saved.');
    end
    
function [] = loadLiftsSettings(varargin)
    
    G = varargin{3};
    
    
    if (isdeployed && ~ismac)
        [fileString,filePath] = uigetfile({'*.mat', 'MAT-files (*.mat)'},...
            'Matlab Browse...', ...
            'assets/', ...
            'MultiSelect', 'off');
    elseif (isdeployed && ismac)
        [fileString,filePath] = uigetfile({'*.mat', 'MAT-files (*.mat)'},...
            'Matlab Browse...', ...
            'MultiSelect', 'off');
    else
        [fileString,filePath] = uigetfile({'*.mat', 'MAT-files (*.mat)'},...
            'Matlab Browse...', ...
            'app/assets/', ...
            'MultiSelect', 'off');
    end
    
    if (filePath ~= 0)
        
        resetAll(G);
        
        load(strcat(filePath,fileString));
        
        if (exist('lifts', 'var') && exist('numOfFloors', 'var') && exist('numOfLifts', 'var'))
            comp = true;
            if (size(lifts,2) == 6)
                lifts(:,6) = [];
            end
        else
            comp = false;
        end
        
        msgID = 'MYFUN:BadIndex';
        msg = 'Floors can be only unique!';
        baseException = MException(msgID,msg);
    
        if (comp && numOfLifts == size(lifts,2) && size(lifts,1) == 5 )
            for i=1:size(lifts,2)
                try
                    validateattributes(lifts{i,1}, {'numeric'},{'scalar','integer', 'real', 'finite', 'positive','>',0, '<', numOfFloors});
                    validateattributes(lifts{i,2}, {'numeric'},{'scalar','integer', 'real', 'finite', 'positive','>',lifts{i,1}, '<', numOfFloors+1});
                    
                    if (size(lifts{i,3},2) ~= size(unique(lifts{i,3}),2))
                        throw(baseException);
                    end
                    
                    if (~(isscalar(lifts{i,3}) && lifts{i,3} == 0))
                    validateattributes(lifts{i,3}, {'numeric'},{'vector','integer', 'real', 'finite', 'positive','>',lifts{i,1}, '<', lifts{i,2}});
                    end
                    
                    validateattributes(lifts{i,4}, {'numeric'},{'scalar','integer', 'real', 'finite', 'positive','>',0});
                    validateattributes(lifts{i,5}, {'double'},{'scalar', 'real', 'finite', 'positive','>',0,'<=',0.7});
                catch
                    comp = false;
                    break;
                end
            end
        end
        
        if (comp)
            lifts(:,6) = {1};
            setappdata(G.window, 'numOfFloors', numOfFloors);
            setappdata(G.window, 'numOfLifts', numOfLifts);
            setappdata(G.window, 'lifts', lifts);
            
            set(G.step1_e_lifts, 'String', numOfLifts);
            set(G.step1_e_floors, 'String', numOfFloors);
            
            checkBasePanel(G);
            set(G.lifts_popup, 'Value', 2);
            handlePopUp(G);
            
        else
            msgbox('Selected file is not supported!');
        end
    else
        msgbox('File was not selected.');
    end

function [] = startSimulation(varargin)

    clear Lift
    clear Human
    
    G = varargin{3};
    
    % deactivate all elements when simulation is running
    GA = [G.btn_start G.btn_reset G.lifts_btnShow G.lifts_btnSave G.humans_panelLoad_btnLoad G.humans_panelNew_btn G.humans_btnSetIter];
    GA = [GA G.menu G.menu_lift_save G.menu_showGUI G.humans_popup G.menu_human_gen G.menu_human_load G.menu_start G.reset];
    set(GA, 'Enable', 'Off');
    
    lifts = getappdata(G.window, 'lifts');
    systemBehaviorOption = getappdata(G.window, 'systemBehaviorOption');
    numOfLifts = getappdata(G.window, 'numOfLifts');
    numOfFloors = getappdata(G.window, 'numOfFloors');
    fileString = getappdata(G.window, 'fileString');
    IdleLiftsToBase = getappdata(G.window, 'IdleLiftsToBase');
    
    simOptions = struct('systemBehaviorOption', systemBehaviorOption,'showDebugInfo', false, 'IdleLiftsToBase', IdleLiftsToBase);
    
    %tic;
    %profile on
    s = Simulation(numOfFloors,numOfLifts,lifts,fileString,simOptions);
    main = Controller(s);
    main.run();
    %profile viewer
    %toc;
    
    % active all elements after simulation is finished
    set(GA, 'Enable', 'On');
   

function [] = setHumansBehavior(varargin)
    
    G = varargin{3};
    
    set(G.humans_a_check, 'Visible', 'Off');
    set(G.humans_i_check, 'Visible', 'On');

    humanFileIsSet = getappdata(G.window,'humanFileIsSet');
    if (isempty(humanFileIsSet))
        set(findall(G.humans_panelLoad, '-property', 'Enable'), 'Enable', 'On');
        set(G.menu_human_load, 'Enable', 'On');
    else
        set(G.menu_start, 'Enable', 'On');
        set(G.btn_start, 'Enable', 'On');
    end
    
    setappdata(G.window,'systemBehaviorOption',get(G.humans_popup,'Value'));
    setappdata(G.window,'IdleLiftsToBase',get(G.humans_lift,'Value'));
     
function [] = generateHumansFcn(varargin)
    
    G = varargin{3};
    
    numOfFloors = getappdata(G.window,'numOfFloors');
    
    GUI_Humans(numOfFloors);
    
function [] = loadHumans(varargin)
    
    G = varargin{3};
    
    if (isdeployed && ~ismac)
        [fileString,filePath] = uigetfile({'*.txt', 'Text files files (*.txt)'},...
            'Matlab Browse...', ...
            'assets/', ...
            'MultiSelect', 'off');
    elseif (isdeployed && ismac)
        [fileString,filePath] = uigetfile({'*.txt', 'Text files files (*.txt)'},...
            'Matlab Browse...', ...
            'MultiSelect', 'off');
    else
        [fileString,filePath] = uigetfile({'*.txt', 'Text files files (*.txt)'},...
            'Matlab Browse...', ...
            'app/assets/', ...
            'MultiSelect', 'off');
    end
    
    set(G.humans_a_checkLoad, 'Visible', 'Off');
    set(G.humans_i_checkLoad, 'Visible', 'Off')
    set(G.btn_start, 'Enable', 'Off');
    set(G.menu_start, 'Enable', 'Off');
    
    if (filePath ~= 0)
        set(G.humans_panelLoad_e,'String',strcat(filePath,fileString));
        setappdata(G.window,'fileString',strcat(filePath,fileString));
        set(G.humans_panelLoad_btnSet, 'Enable', 'On');
        set(G.humans_panelLoad_e, 'Enable', 'On');
        set(G.menu_human_set, 'Enable', 'On');
    else
        msgbox('File was not selected.');
    end

function [] = setLoadedHumans(varargin)
    
    this = varargin{1};
    G = varargin{3};
    
    fileString = getappdata(G.window,'fileString');
    
    error = false;
    try
        dlmread(fileString);
    catch ME
        msgbox(ME.message);
        error = true;
    end    
    
    if (~error)
        checkHumanList(G)
        sizes = getappdata(G.window,'sizes');
        if (sizes(1,2) == 0)
            msgbox('There are no valid entries on the list!');
        else
            set(G.humans_a_checkLoad, 'Visible', 'Off');
            set(G.humans_i_checkLoad, 'Visible', 'On');
            set(G.humans_panelLoad_e, 'Enable', 'Off');
            setappdata(G.window, 'humanFileIsSet',1);
            set(G.btn_start, 'Enable', 'On');
            set(G.menu_start, 'Enable', 'On');
            
            set(this, 'Enable', 'Off');
            if (this == G.menu_human_set)
                set(G.humans_panelLoad_btnSet, 'Enable', 'Off');
            else
                set(G.menu_human_set, 'Enable', 'Off');
            end
        end
        
    else
        set(G.btn_start, 'Enable', 'Off');
        set(G.menu_start, 'Enable', 'Off');
        set(G.humans_a_checkLoad, 'Visible', 'Off');
        set(G.humans_i_checkLoad, 'Visible', 'Off')
    end
    
 function [] = createSObjectForView(G)
     
     clear Lift
     clear Human
     
     lifts = getappdata(G.window, 'lifts');
     numOfLifts = getappdata(G.window, 'numOfLifts');
     numOfFloors = getappdata(G.window, 'numOfFloors');
     sG = Simulation(numOfFloors,numOfLifts,lifts);
     main = Controller(sG);
     setappdata(G.window, 'sG',main);
     set(G.lifts_e_liftPerFloor, 'String',main.getLiftsPerFloorAverage);
     
function [] = HumanSettingsChanged(varargin)
    
    G = varargin{3};
    
    set(G.humans_a_check, 'Visible', 'Off');
    set(G.humans_i_check, 'Visible', 'Off');
    set(G.btn_start, 'Enable', 'Off');
    set(G.menu_start, 'Enable', 'Off');
    
function [] = resetAll(varargin)
% Reseting all values and variables to default values

    if (nargin == 3)
        G = varargin{3};
    elseif (nargin == 1)
        G = varargin{1};
    end
    
    set(G.btn_start, 'Enable', 'Off');
    
    % clear all appdata;
    setappdata(G.window, 'lifts', []);
    setappdata(G.window, 'numOfIte', []);
    setappdata(G.window, 'systemBehaviorOption', []);
    setappdata(G.window, 'humanFileIsSet',[]);
    setappdata(G.window, 'numOfLifts', []);
    setappdata(G.window, 'numOfFloors', []);
    setappdata(G.window, 'numOfHumans', []);
    setappdata(G.window, 'fileString', []);
    setappdata(G.window, 'IdleLiftsToBase',[]);
    setappdata(G.window, 'liftTry', false);
    setappdata(G.window, 'sG', []);
    setappdata(G.window,'sizes', []);
    
    % reseting step 1
    set(G.step1_e_lifts, 'String', 1);
    set(G.step1_e_floors, 'String', 2);
    set(G.step1_i_check, 'Visible', 'Off');
    set(findall(G.step1_panel, '-property', 'Enable'), 'Enable', 'On');
    
    % reseting step 2
    set(G.lifts_popup, 'String', 'Select lift to configure', 'Enable', 'Off', 'Value', 1);
    l_p_a = [G.lifts_e_base G.lifts_e_final G.lifts_e_forb G.lifts_e_capacity G.lifts_e_speed G.lifts_btn G.lifts_btnShow G.lifts_btnSave];
    set(l_p_a, 'Enable', 'Off');
    set(G.lifts_i_check, 'Visible', 'Off');
    set(G.lifts_e_liftPerFloor, 'String', '-');
    
    % reseting step 3
    set(findall(G.humans_panel, '-property', 'Enable'), 'Enable', 'Off');
    set(G.humans_panelLoad_e,'String','...');
    h_p_a = [G.humans_i_check G.humans_i_checkLoad];
    set(h_p_a, 'Visible', 'Off');
    
    % reseting menu items
    set(G.menu_lift_save, 'Enable', 'Off');
    set(G.menu_lift_confirm, 'Enable', 'Off');
    set(G.menu_human_gen, 'Enable', 'Off');
    set(G.menu_human_load, 'Enable', 'Off');
    set(G.menu_human_set, 'Enable', 'Off');
    set(G.menu_showGUI, 'Enable', 'Off');
    set(G.menu_start, 'Enable', 'Off');
    
function [] = checkHumanList(varargin)
    
    G = varargin{1};
    
    fileString = getappdata(G.window,'fileString');
    numOfFloors = getappdata(G.window, 'numOfFloors');
    
    try
        humansList = dlmread(fileString);
    catch ME
        msgbox(ME.message);
    end
    
    [~, list_error, sizes] = Simulation.deleteWrongHumans(humansList, numOfFloors);
    
    setappdata(G.window,'sizes', sizes);
    
    if (list_error)
        message = sprintf('There were some unsupported entries on the list (eg. start and final floor was same) \n\nThese entries were deleted, new number of entries %d (original %d).',sizes(2), sizes(1));
        
        msgbox(message);
    end

function [] = showAbout(varargin)
    
    if (~isdeployed)
       web('assets/output_about.html');
    else
        web('output_about.html');
    end

function [] = closeWindow(varargin)
    
    G = varargin{3};
    close(G.window);