function [] = GUI_Humans(varargin)
%GUI for generation of visitors file
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Up&Down
% Author - Michal Semelka, <m.semelka@gmail.com>, 2017
% https://github.com/michalsemelka/UpEtDown
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% resolution calculation
resolution = get(0,'screensize');

correction = 0;
correction20 = 0;
correction30 = 0;
if (resolution(4) < 800)
    correction = 50;
    correction20 = 20;
    correction30 = 30;
end

positionx = (resolution(3) - 500)/2;
positiony = (resolution(4) - 700-correction)/2;

G.window = figure('units','pixels',...
              'position',[positionx positiony+correction30 500 700-correction],...
              'menubar','none',...
              'name','Up&Down - Generator of visitors',...
              'numbertitle','off',...
              'resize','off',...
              'Color', get(0,'DefaultUicontrolBackgroundColor'),...
              'DockControls','off');

G.file = uimenu(G.window,'Label','File');
G.exit = uimenu(G.file,'Label','Exit','Accelerator','X');

if (~isdeployed)          
    check_img = imread('assets/g_check.jpg');
else
    check_img = imread('g_check.jpg');
end

G.info_t = uicontrol('Parent',G.window',...
    'style','text',...
    'units','pixels',...
    'position',[25 675 400 20],...
    'String', 'Choose how to generate a list: ',...
    'FontUnits', 'Pixel',...
    'FontSize', 14,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');

G.switch_option = uibuttongroup('Parent',G.window',...
    'units','pixels',...
    'Position',[25 150-correction20 450 520],...
    'Title', '',...
    'BorderType', 'none');
G.peak_r = uicontrol('Parent',G.switch_option',...
    'style','radiobutton',...
    'units','pixels',...
    'position',[25 495 140 28],...
    'String', 'Peak-specific',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');
G.uniform_r = uicontrol('Parent',G.switch_option',...
    'style','radiobutton',...
    'units','pixels',...
    'position',[160 495 140 28],...
    'String', 'Uniform',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');

G.peak_panel = uipanel('Parent',G.switch_option',...
    'units','normalized',...
    'Position',[0 0.42 1 0.52],...
    'Title', '',...
    'Visible', 'On',...
    'BorderType', 'etchedin');

G.peak_num_t = uicontrol('Parent',G.peak_panel',...
    'style','text',...
    'units','pixels',...
    'position',[10 230 120 14],...
    'String', 'Number of peaks',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');
G.peak_num_e = uicontrol('Parent',G.peak_panel',...
    'style','edit',...
    'units','pixels',...
    'position',[150 223 60 28],...
    'String', 1,...
    'BackgroundColor', [1 1 1],...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');
G.peak_num_b = uicontrol('Parent',G.peak_panel',...
    'style','pushbutton',...
    'units','pixels',...
    'position',[225 223 60 28],...
    'String', 'Set',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');

G.peak_popup = uicontrol('Parent',G.peak_panel',...
    'style','popupmenu',...
    'units','pixels',...
    'BackgroundColor', [1 1 1],...
    'position',[300 234 130 14],...
    'String', 'Select peak',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'Enable', 'Off',...
    'FontWeight','Normal');

G.peak_arrival_t = uicontrol('Parent',G.peak_panel',...
    'style','text',...
    'units','pixels',...
    'position',[10 180 150 14],...
    'String', 'Expected value of iteration',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');
G.peak_arrival_e = uicontrol('Parent',G.peak_panel',...
    'style','edit',...
    'units','pixels',...
    'position',[370 173 60 28],...
    'String', 100,...
    'BackgroundColor', [1 1 1],...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');
G.peak_arrivalRate_t = uicontrol('Parent',G.peak_panel',...
    'style','text',...
    'units','pixels',...
    'position',[10 140 250 14],...
    'String', 'Max number of arrivals',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');
G.peak_arrivalRate_e = uicontrol('Parent',G.peak_panel',...
    'style','edit',...
    'units','pixels',...
    'position',[370 133 60 28],...
    'String', 5,...
    'BackgroundColor', [1 1 1],...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');
G.peak_baseFloors_t = uicontrol('Parent',G.peak_panel',...
    'style','text',...
    'units','pixels',...
    'position',[10 100 250 14],...
    'String', 'From floor(s)',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');
G.peak_baseFloors_e = uicontrol('Parent',G.peak_panel',...
    'style','edit',...
    'units','pixels',...
    'position',[370 93 60 28],...
    'String', 'all',...
    'BackgroundColor', [1 1 1],...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');
G.peak_desiredFloors_t = uicontrol('Parent',G.peak_panel',...
    'style','text',...
    'units','pixels',...
    'position',[10 60 250 14],...
    'String', 'To floor(s)',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');
G.peak_desiredFloors_e = uicontrol('Parent',G.peak_panel',...
    'style','edit',...
    'units','pixels',...
    'position',[370 53 60 28],...
    'String', 'all',...
    'BackgroundColor', [1 1 1],...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');
G.peak_set_b = uicontrol('Parent',G.peak_panel',...
    'style','pushbutton',...
    'units','pixels',...
    'position',[10 10 150 28],...
    'String', 'Generate this peak',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');
G.peak_set_a = axes('Parent',G.peak_panel',...
            'units','pixels',...
            'Position',[170 10 25 25], ...
            'xtick',[],...
            'ytick',[],...
            'Visible', 'Off');
G.peak_set_i = imshow(check_img, 'Parent', G.peak_set_a);
set(G.peak_set_i, 'Visible', 'Off');
G.peak_info_set_t = uicontrol('Parent',G.peak_panel',...
    'style','text',...
    'units','pixels',...
    'position',[220 18 150 14],...
    'String', 'Every peak generated?',...
    'Enable', 'Off', ...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');
G.peak_info_set_a = axes('Parent',G.peak_panel',...
            'units','pixels',...
            'Position',[375 18 15 15], ...
            'xtick',[],...
            'ytick',[],...
            'Visible', 'Off');
G.peak_info_set_i = imshow(check_img, 'Parent', G.peak_info_set_a);
set(G.peak_info_set_i, 'Visible', 'Off');

G.peak_info_panel = uipanel('Parent',G.switch_option',...
    'units','pixels',...
    'Position',[1 155 450 60],...
    'Title', '',...
    'Visible', 'On',...
    'BorderType', 'etchedin');
G.peak_info_count_t = uicontrol('Parent',G.peak_info_panel',...
    'style','text',...
    'units','pixels',...
    'position',[10 25 250 14],...
    'String', 'Total number of generated visitors: ',...
    'Enable', 'Off', ...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');
G.peak_info_count_t2 = uicontrol('Parent',G.peak_info_panel',...
    'style','text',...
    'units','pixels',...
    'position',[270 25 100 14],...
    'String', 0,...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');

G.peak_add_panel = uipanel('Parent',G.switch_option',...
    'units','pixels',...
    'Position',[1 0 450 150],...
    'Title', '',...
    'Visible', 'On',...
    'BorderType', 'etchedin');
G.peak_add_t = uicontrol('Parent',G.peak_add_panel',...
    'style','text',...
    'units','pixels',...
    'position',[10 125 350 14],...
    'String', 'Uniformly distributed:',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');
G.peak_add_from_t = uicontrol('Parent',G.peak_add_panel',...
    'style','text',...
    'units','pixels',...
    'position',[10 95 70 14],...
    'String', 'From iteration ',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');
G.peak_add_from_e = uicontrol('Parent',G.peak_add_panel',...
    'style','edit',...
    'units','pixels',...
    'position',[85 87 60 28],...
    'String', 1,...
    'BackgroundColor', [1 1 1],...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');
G.peak_add_to_t = uicontrol('Parent',G.peak_add_panel',...
    'style','text',...
    'units','pixels',...
    'position',[150 95 70 14],...
    'String', 'to iteration ',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');
G.peak_add_to_e = uicontrol('Parent',G.peak_add_panel',...
    'style','edit',...
    'units','pixels',...
    'position',[220 87 60 28],...
    'String', 100,...
    'BackgroundColor', [1 1 1],...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');
G.peak_add_base_t = uicontrol('Parent',G.peak_add_panel',...
    'style','text',...
    'units','pixels',...
    'position',[10 55 80 14],...
    'String', 'From floor(s)',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');
G.peak_add_base_e = uicontrol('Parent',G.peak_add_panel',...
    'style','edit',...
    'units','pixels',...
    'position',[85 47 60 28],...
    'String', 'all',...
    'BackgroundColor', [1 1 1],...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');
G.peak_add_desired_t = uicontrol('Parent',G.peak_add_panel',...
    'style','text',...
    'units','pixels',...
    'position',[150 55 80 14],...
    'String', 'to floor(s)',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');
G.peak_add_desired_e = uicontrol('Parent',G.peak_add_panel',...
    'style','edit',...
    'units','pixels',...
    'position',[220 47 60 28],...
    'String', 'all',...
    'BackgroundColor', [1 1 1],...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');
G.peak_add_count_t = uicontrol('Parent',G.peak_add_panel',...
    'style','text',...
    'units','pixels',...
    'position',[290 95 70 14],...
    'String', 'in number ',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');
G.peak_add_count_e = uicontrol('Parent',G.peak_add_panel',...
    'style','edit',...
    'units','pixels',...
    'position',[370 87 60 28],...
    'String', 1,...
    'BackgroundColor', [1 1 1],...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');
G.peak_add_b = uicontrol('Parent',G.peak_add_panel',...
    'style','pushbutton',...
    'units','pixels',...
    'position',[10 10 100 28],...
    'String', 'Generate',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');
G.peak_add_a = axes('Parent',G.peak_add_panel',...
            'units','pixels',...
            'Position',[120 10 25 25], ...
            'xtick',[],...
            'ytick',[],...
            'Visible', 'Off');
G.peak_add_i = imshow(check_img, 'Parent', G.peak_add_a);
set(G.peak_add_i, 'Visible', 'Off');

G.filename_e = uicontrol('Parent',G.window',...
    'style','edit',...
    'units','pixels',...
    'position',[20 90-correction20 460 28],...
    'String', '...',...
    'BackgroundColor', [1 1 1],...
    'Enable', 'Off',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');
G.filename_t = uicontrol('Parent',G.window',...
    'style','text',...
    'units','pixels',...
    'position',[20 125-correction20 460 14],...
    'String', 'Name of saved file',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'Enable', 'Off',...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');

G.savefile_b = uicontrol('Parent',G.window',...
    'style','pushbutton',...
    'units','pixels',...
    'position',[20 25-correction20 150 50],...
    'String', 'Save to file',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'Enable', 'Off',...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');

G.graphit_b = uicontrol('Parent',G.window',...
    'style','pushbutton',...
    'units','pixels',...
    'position',[190 25-correction20 290 50],...
    'String', 'View graph of arrivals',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'Enable', 'Off',...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');
       
% Base parameters
setappdata(G.window, 'numOfFloors', []);
peakStruct = struct('Peak', []);
peakStruct.Peak = {[0 0 0]};
setappdata(G.window, 'PeakStruct', peakStruct);

G.windowBaseParams = figure('units','pixels',...
    'position',[positionx*1.333 250 250 200],...
    'menubar','none',...
    'name','Enter base parameter',...
    'numbertitle','off',...
    'resize','off',...
    'Visible', 'Off',...
    'Color', get(0,'DefaultUicontrolBackgroundColor'),...
    'DockControls','off');

G.base_t = uicontrol('Parent',G.windowBaseParams',...
    'style','text',...
    'units','pixels',...
    'position',[25 175 250 14],...
    'String', 'Enter base parameter',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');

G.base_floors_t = uicontrol('Parent',G.windowBaseParams',...
    'style','text',...
    'units','pixels',...
    'position',[25 100 120 14],...
    'String', 'Number of floors',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'left',...
    'FontWeight','Normal');
G.base_floors_e = uicontrol('Parent',G.windowBaseParams',...
    'style','edit',...
    'units','pixels',...
    'position',[165 93 60 28],...
    'String', 4,...
    'BackgroundColor', [1 1 1],...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');


G.base_set = uicontrol('Parent',G.windowBaseParams',...
    'style','pushbutton',...
    'units','pixels',...
    'position',[25 13 200 28],...
    'String', 'Set',...
    'FontUnits', 'Pixel',...
    'FontSize', 12,...
    'HorizontalAlignment', 'center',...
    'FontWeight','Normal');
    
if (nargin() == 0)
    set(G.windowBaseParams, 'Visible', 'On');
    set(G.windowBaseParams, 'CloseRequestFcn', '');
else
    setappdata(G.window, 'numOfFloors', varargin{1});
end

% Handles
G.peak_handles = [G.peak_arrival_t G.peak_arrival_e G.peak_arrivalRate_t G.peak_arrivalRate_e G.peak_baseFloors_t G.peak_baseFloors_e G.peak_desiredFloors_t G.peak_desiredFloors_e G.peak_set_b];

% Default visibilities
set(G.peak_handles, 'Enable', 'Off');
set(findall(G.peak_add_panel, '-property', 'Enable'), 'Enable', 'Off');

% Callbacks
set(G.exit,'Callback', {@closeWindow,G});
set(G.base_set,'Callback', {@setBaseParams,G});
set(G.peak_num_b,'Callback', {@setNumOfPeaks,G});
set(G.peak_popup,'Callback', {@handlePopup,G});
set(G.peak_set_b,'Callback', {@setOnePeak,G});
set(G.savefile_b,'Callback', {@saveAll,G});
set(G.graphit_b,'Callback', {@graphIt,G});
set(G.peak_add_b,'Callback', {@generateUniForPeak,G});
set(G.switch_option,'SelectionChangeFcn', {@switchPanel,G});

function [] = setBaseParams(varargin)
G = varargin{3};

numOfFloors = str2num(get(G.base_floors_e, 'String'));

try
    error = false;
    validateattributes(numOfFloors, {'numeric'},{'integer', 'real', 'finite', 'positive','scalar','>',1})
catch ME
    msgbox(ME.message);
    error = true;
end

if (~error)
    setappdata(G.window, 'numOfFloors', numOfFloors);
    set(G.windowBaseParams, 'CloseRequestFcn', 'closereq');
    
    close(G.windowBaseParams);
end

function [] = setNumOfPeaks(varargin)
G = varargin{3};

numOfPeaks = str2num(get(G.peak_num_e, 'String'));

try
    error = false;
    validateattributes(numOfPeaks, {'numeric'},{'integer', 'real', 'finite', 'positive','scalar','>',0})
catch ME
    msgbox(ME.message);
    error = true;
end

if (~error)
    setappdata(G.window, 'numOfPeaks', numOfPeaks);
    setappdata(G.window,'peaksData',cell(numOfPeaks,5));
    
    str_popup{1} = 'Select peak';
    str = 'Peak';
    
    for i=2:numOfPeaks+1
        str_num = num2str(i-1);
        str_popup{i} = sprintf('%s %s',str,str_num);
    end
    
    set(G.peak_popup, 'String', str_popup, 'Enable', 'On');
    
    peakStruct = struct('Peak', []);
    peakStruct.Peak = {[0 0 0]};
    peakStruct.Peak(numOfPeaks) = {[0 0 0]};
    setappdata(G.window, 'PeakStruct', peakStruct);
    
    countArray = zeros(numOfPeaks,1);
    setappdata(G.window, 'countArray', countArray);
    
    set(G.peak_info_set_t, 'Enable', 'Off');
    set(G.peak_info_set_a, 'Visible', 'Off');
    set(G.peak_info_set_i, 'Visible', 'Off');
end

function [] = handlePopup(varargin)
this = varargin{1};
G = varargin{3};

value = get(this, 'Value');
peaks = getappdata(G.window, 'peaksData');

if (value ~= 1)
    set(G.peak_handles, 'Enable', 'On');
    
    peakID = value - 1;
    isSet = ~isempty(peaks{peakID,5});
    
    if (isSet)
        set(G.peak_arrival_e, 'String', peaks{peakID,1});
        set(G.peak_arrivalRate_e, 'String', peaks{peakID,2});
        
        if (peaks{peakID,3} == 0)
            base ='all';
        else
            base = num2str(peaks{peakID,3});
        end
        
        if (peaks{peakID,4} == 0)
            desired ='all';
        else
            desired = num2str(peaks{peakID,4});
        end
        
        set(G.peak_baseFloors_e, 'String', base);
        set(G.peak_desiredFloors_e, 'String', desired);
        
        set(G.peak_set_a, 'Visible', 'Off')
        set(G.peak_set_i, 'Visible', 'On');
    else
        set(G.peak_arrival_e, 'String', 100);
        set(G.peak_arrivalRate_e, 'String', 5);
        set(G.peak_baseFloors_e, 'String', 'all');
        set(G.peak_desiredFloors_e, 'String', 'all');
        
        set(G.peak_set_i, 'Visible', 'Off');
    end
else
    set(G.peak_handles, 'Enable', 'Off');
    set(G.peak_set_i, 'Visible', 'Off');
end

function [] = setOnePeak(varargin)
    G = varargin{3};

    value = get(G.peak_popup, 'Value');
    peaks = getappdata(G.window, 'peaksData');
    peakID = value - 1;

    tmpTime = str2num(get(G.peak_arrival_e, 'String'));
    tmpCount = str2num(get(G.peak_arrivalRate_e, 'String'));
    
    tmpBase = get(G.peak_baseFloors_e, 'String');
    if (strcmp(tmpBase, 'all'))
        tmpBase = 0;
    else
        tmpBase = str2num(tmpBase);
    end
    
    tmpDesired = get(G.peak_desiredFloors_e, 'String');
    if (strcmp(tmpDesired, 'all'))
        tmpDesired = 0;
    else
        tmpDesired = str2num(tmpDesired);
    end

    numOfFloors = getappdata(G.window, 'numOfFloors');
    
    res = 0;
    if (~isempty(tmpBase) && ~isempty(tmpDesired))
        res = intersect(tmpBase,tmpDesired);
    end
    
    msgID = 'MYFUN:BadIndex';
    msg = 'Floors "from" and "to" cannot be equal!';
    baseException = MException(msgID,msg);
    msg2 = 'Floors can be only unique!';
    baseException2 = MException(msgID,msg2);
    
    try
        error = false;
        
        if (~isempty(res) && res ~= 0)
            throw(baseException);
        end
        
        if (size(tmpDesired,2) ~= size(unique(tmpDesired),2) || size(tmpBase,2) ~= size(unique(tmpBase),2))
            throw(baseException2);
        end
        
        validateattributes(tmpTime, {'numeric'},{'integer', 'real', 'finite', 'positive','scalar','>',0})
        validateattributes(tmpCount, {'numeric'},{'integer', 'real', 'finite', 'positive','scalar','>',0})

        if (isempty(tmpBase) || ~(isscalar(tmpBase) && tmpBase == 0))
            validateattributes(tmpBase, {'numeric'},{'vector','integer', 'real', 'finite', 'positive', '>', 0, '<', numOfFloors+1});
        end

        if (isempty(tmpDesired) || ~(isscalar(tmpDesired) && tmpDesired == 0))
            validateattributes(tmpDesired, {'numeric'},{'vector','integer', 'real', 'finite', 'positive', '>', 0, '<', numOfFloors+1});
        end
    catch ME
        msgbox(ME.message);
        set(G.peak_set_i, 'Visible', 'Off')
        error = true;
    end

    if (error ~= true)
        peaks(peakID,1) = {tmpTime};
        peaks(peakID,2) = {tmpCount};
        peaks(peakID,3) = {tmpBase};
        peaks(peakID,4) = {tmpDesired};

        setappdata(G.window,'peaksData',peaks);

        generatePeak(G, peakID);

        set(G.peak_set_a, 'Visible', 'Off')
        set(G.peak_set_i, 'Visible', 'On');
    end

function [] = generatePeak(G, peakID)

    PeakStruct = getappdata(G.window, 'PeakStruct');
    peaks = getappdata(G.window, 'peaksData');
    numOfFloors = getappdata(G.window, 'numOfFloors');
    
    peakTime = peaks{peakID,1};
    peakCount = peaks{peakID,2};
    peakBase = peaks{peakID,3};
    peakDesired = peaks{peakID,4};
    
    times = poissrnd(peakTime,1,peakCount);
    times = times(times ~= 0);
    times = times';
    
    if (size(peakBase,2) == 1 && peakBase == 0)
        base = randi(numOfFloors,size(times,1),1);
    else
        base = zeros(size(times,1),1);
        for i=1:size(times,1)
            ind = ceil(rand * size(peakBase,2));
            base(i,1) =  peakBase(ind);
        end
    end
    
    if (size(peakDesired,2) ==1 && peakDesired == 0)
        desired = randi(numOfFloors,size(times,1),1);
    else
        desired = zeros(size(times,1),1);
        for i=1:size(times,1)
            ind = ceil(rand * size(peakDesired,2));
            desired(i,1) =  peakDesired(ind);
        end
    end
    
    result = [times desired base];
    
    floorsVector = 1:numOfFloors;
    for i=1:size(result,1)
        if (result(i,2) == result(i,3))
            tmpVector = floorsVector(floorsVector ~= result(i,2));
            ind = ceil(rand * size(tmpVector,2));
            result(i,3) = tmpVector(ind);
        end
    end
    
    PeakStruct.Peak(peakID) = {result};
    setappdata(G.window, 'PeakStruct', PeakStruct);
    
    peaks(peakID,5) = {true};
    setappdata(G.window, 'peaksData', peaks);
    
    updateTravellersCount(G, peakID, size(times,1), false);
    checkAllPeaks(G);
    
function [] = updateTravellersCount(G, peakID, count, new)

    countArray = getappdata(G.window, 'countArray');
    if (new)
        countArray(end+1,1) = count;
    else
        countArray(peakID,1) = count;
    end
    
    set(G.peak_info_count_t, 'Enable', 'On');
    set(G.peak_info_count_t2, 'String', sum(countArray));
    setappdata(G.window, 'countArray', countArray);

function [] = checkAllPeaks(G)

    peaks = getappdata(G.window, 'peaksData');
    checks = [peaks{:,5}];
    
    if (size(checks,2) == size(peaks,1))
        set(G.peak_info_set_t, 'Enable', 'On');
        set(G.peak_info_set_a, 'Visible', 'Off');
        set(G.peak_info_set_i, 'Visible', 'On');
        
        set(findall(G.peak_add_panel, '-property', 'Enable'), 'Enable', 'On');
        set(G.peak_add_t, 'String','Expand the list with uniformly distributed entries?');
        set(G.savefile_b, 'Enable', 'On');
        set(G.graphit_b, 'Enable', 'On');
    end
    
function [] = generateUniForPeak(varargin)
    G = varargin{3};
    
    tmpFrom = str2num(get(G.peak_add_from_e, 'String'));
    tmpTo = str2num(get(G.peak_add_to_e, 'String'));
    tmpCount = str2num(get(G.peak_add_count_e, 'String'));
    
    tmpBase = get(G.peak_add_base_e, 'String');
    if (strcmp(tmpBase, 'all'))
        tmpBase = 0;
    else
        tmpBase = str2num(tmpBase);
    end
    
    tmpDesired = get(G.peak_add_desired_e, 'String');
    if (strcmp(tmpDesired, 'all'))
        tmpDesired = 0;
    else
        tmpDesired = str2num(tmpDesired);
    end
    
    res = 0;
    if (~isempty(tmpBase) && ~isempty(tmpDesired))
        res = intersect(tmpBase,tmpDesired);
    end
    
    msgID = 'MYFUN:BadIndex';
    msg = 'Floors "from" and "to" cannot be equal!';
    baseException = MException(msgID,msg);
    msg2 = 'Floors can be only unique!';
    baseException2 = MException(msgID,msg2);
    
    numOfFloors = getappdata(G.window, 'numOfFloors');
    
    try
        error = false;
        
        if (~isempty(res) && res ~= 0)
            throw(baseException);
        end
        
        if (size(tmpDesired,2) ~= size(unique(tmpDesired),2) || size(tmpBase,2) ~= size(unique(tmpBase),2))
            throw(baseException2);
        end
        
        validateattributes(tmpFrom, {'numeric'},{'integer', 'real', 'finite', 'positive','scalar','>',0})
        validateattributes(tmpTo, {'numeric'},{'integer', 'real', 'finite', 'positive','scalar','>',tmpFrom})
        validateattributes(tmpCount, {'numeric'},{'integer', 'real', 'finite', 'positive','scalar','>',0})
        
        if (isempty(tmpBase) || ~(isscalar(tmpBase) && tmpBase == 0))
            validateattributes(tmpBase, {'numeric'},{'vector','integer', 'real', 'finite', 'positive', '>', 0, '<', numOfFloors+1});
        end
        
        if (isempty(tmpDesired) || ~(isscalar(tmpDesired) && tmpDesired == 0))
            validateattributes(tmpDesired, {'numeric'},{'vector','integer', 'real', 'finite', 'positive', '>', 0, '<', numOfFloors+1});
        end
    catch ME
        msgbox(ME.message);
        error = true;
    end
    
    if (~error)
        
        data = getappdata(G.window, 'PeakStruct');
        
        times = randi([tmpFrom tmpTo],tmpCount,1);
        
        if (size(tmpBase,2) ==1 && tmpBase == 0)
            base = randi(numOfFloors,tmpCount,1);
        else
            base = zeros(size(times,1),1);
            for i=1:size(times,1)
                ind = ceil(rand * size(tmpBase,2));
                base(i,1) =  tmpBase(ind);
            end
        end
        
        if (size(tmpDesired,2) ==1 && tmpDesired == 0)
            desired = randi(numOfFloors,tmpCount,1);
        else
            desired = zeros(size(times,1),1);
            for i=1:size(times,1)
                ind = ceil(rand * size(tmpDesired,2));
                desired(i,1) =  tmpDesired(ind);
            end
        end
        
        list = [times desired base];
        
        floorsVector = 1:numOfFloors;
        for i=1:size(list,1)
            if (list(i,2) == list(i,3))
                tmpVector = floorsVector(floorsVector ~= list(i,2));
                ind = ceil(rand * size(tmpVector,2));
                list(i,3) = tmpVector(ind);
            end
        end
          
        data.Peak(end+1) = {list};
        
        % nasty hack
        if (size(data.Peak{1},1) == 1 && isequal(data.Peak{1}, [0 0 0]))
            data.Peak(1) = [];
        end
        
        setappdata(G.window, 'PeakStruct', data);
        
        updateTravellersCount(G, 42, size(times,1), true);
        
        msgbox('List of visitors was expanded.');
        
        set(G.savefile_b, 'Enable', 'On');
        set(G.graphit_b, 'Enable', 'On');
        
    end

function [] = switchPanel(varargin)
    G = varargin{3};
    
    peak = get(G.peak_r,'Value');
    
    if (peak == 1)
        
        set([G.peak_num_t G.peak_num_e G.peak_num_b], 'Enable', 'On');
        set(findall(G.peak_add_panel, '-property', 'Enable'), 'Enable', 'Off');
        set([G.savefile_b G.graphit_b], 'Enable', 'Off');
        set(G.filename_e, 'Enable', 'Off', 'String', '...');
        set(G.filename_t, 'Enable', 'Off');
        
        set(G.peak_info_count_t, 'Enable', 'Off');
        set(G.peak_info_count_t2, 'String', 0);
    else
        set([G.peak_num_t G.peak_num_e G.peak_num_b G.peak_popup G.peak_info_set_t G.savefile_b G.graphit_b], 'Enable', 'Off');
        set(G.filename_e, 'Enable', 'Off', 'String', '...');
        set(G.filename_t, 'Enable', 'Off');
        set(G.peak_handles, 'Enable', 'Off');
        set(findall(G.peak_add_panel, '-property', 'Enable'), 'Enable', 'On');
        set(G.peak_set_i, 'Visible', 'Off');
        set(G.peak_info_set_i, 'Visible', 'Off');
        set(G.peak_add_t, 'String','Uniformly distributed:');
        
        set(G.peak_info_count_t, 'Enable', 'Off');
        set(G.peak_info_count_t2, 'String', 0);
        
        countArray = zeros(1,1);
        setappdata(G.window, 'countArray', countArray);
    end
    
function [] = saveAll(varargin)
    G = varargin{3};
    
    data = getappdata(G.window, 'PeakStruct');
    numOfFloors = getappdata(G.window, 'numOfFloors');
    list = [];
    
    for i=1:size(data.Peak,2)
        list = [list; data.Peak{i}];
    end
    [~,I]=sort(list(:,1));
    list=list(I,:);
    
    fileNamePrefix='HL-';
    fileNumOfFloors = num2str(numOfFloors);
    fileNumOfHumans = num2str(size(list,1));
    
    % Test if datetime function is available
    testFunction = exist('datetime', 'file');
    
    if (testFunction == 0)
        fileDate = datestr(now, 'HH-MM-yyyy-dd-mm');
    else
        fileDate=char(datetime('now','Format','HH-mm''-''yyyy-dd-MM'));
    end
    
    fileName = strcat(fileNamePrefix,fileNumOfFloors,'-',fileNumOfHumans,'_');
    
    if (~isdeployed)
        filePath='app/assets/';
    else
        filePath='assets/';
    end
    
    fileString = strcat(fileName,fileDate,'.txt');
    fileFullPath=strcat(filePath,fileName,fileDate,'.txt');
    
    try
        error = false;
        
        if (isdeployed && ismac)
            % special care for deployed app on macOS
            [fileMac,pathMac] = uiputfile(strcat(fileName,fileDate,'.txt'),'Save list.');
            fileString = fileMac;
            fileFullPath = strcat(pathMac,fileMac);
        end
        
        dlmwrite(fileFullPath, list);
    catch ME
        error = true;
        fprintf('Error! %s \n', ME.message);
    end
    
    if (~error)
        set(G.filename_t, 'Enable', 'On');
        set(G.filename_e, 'Enable', 'On','Background', [0.29 0.58 0.08], 'String', fileString);
        set(G.filename_e, 'Enable', 'On','ForegroundColor', [1 1 1], 'String', fileString);
        
        msgbox('File was successfully saved!');
    end

function [] = graphIt(varargin)
    G = varargin{3};

    data = getappdata(G.window, 'PeakStruct');
    list = [];

    for i=1:size(data.Peak,2)
        list = [list; data.Peak{i}];
    end
    
    figure
    
    % test histogram fcn
    testFunction = exist('histogram', 'file');
    
    if (testFunction)
        graphHist = histogram(list(:,1));
    else
        hist(list(:,1));
    end

    xlabel('{\itt}_{sim}');
    ylabel('{\ita}_R');
    grid on;

    
function [] = closeWindow(varargin)
    G = varargin{3};
    close(G.window);